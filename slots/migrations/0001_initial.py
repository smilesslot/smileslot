# Generated by Django 4.2.23 on 2025-09-06 12:27

import ckeditor.fields
import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import phonenumber_field.modelfields
import slots.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('Dashboard', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, region=None)),
                ('address', models.CharField(blank=True, default='', help_text='Does not have to be specific, just the city and the state', max_length=255, null=True)),
                ('want_reminder', models.BooleanField(default=False)),
                ('additional_info', models.TextField(blank=True, null=True)),
                ('paid', models.BooleanField(default=False)),
                ('amount_to_pay', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('id_request', models.CharField(blank=True, max_length=100, null=True)),
                ('remark', ckeditor.fields.RichTextField(blank=True)),
                ('prescription', ckeditor.fields.RichTextField(blank=True)),
                ('recommended_test', ckeditor.fields.RichTextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='AppointmentRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('appointment_number', models.IntegerField(default=0, null='TRUE')),
                ('fullname', models.CharField(max_length=250)),
                ('email', models.EmailField(max_length=100)),
                ('mobile_number', models.CharField(max_length=11)),
                ('status', models.CharField(choices=[('', '-----'), ('Revoked', 'Revoked'), ('Scheduled', 'Scheduled'), ('Cancelled', 'Cancelled'), ('Completed', 'Completed'), ('Pending', 'Pending'), ('Processing', 'Processing')], default='Pending', max_length=10, verbose_name='Status')),
                ('payment_type', models.CharField(choices=[('full', 'Full payment'), ('down', 'Down payment')], default='full', max_length=4)),
                ('id_request', models.CharField(blank=True, max_length=100, null=True)),
                ('reschedule_attempts', models.PositiveIntegerField(default=0)),
                ('nerd', models.CharField(blank=True, max_length=50, null=True)),
                ('additional_msg', ckeditor.fields.RichTextField(blank=True)),
                ('date', models.DateField()),
                ('date_of_appointment', models.CharField(max_length=250)),
                ('time_of_appointment', models.CharField(max_length=250)),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('clinic', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='clinic_doc', to='Dashboard.clinicreg')),
            ],
        ),
        migrations.CreateModel(
            name='Config',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slot_duration', models.PositiveIntegerField(help_text='Minimum time for an appointment in minutes, recommended 30.', null=True)),
                ('lead_time', models.TimeField(help_text='Time when we start working.', null=True)),
                ('finish_time', models.TimeField(help_text='Time when we stop working.', null=True)),
                ('appointment_buffer_time', models.FloatField(help_text="Time between now and the first available slot for the current day (doesn't affect tomorrow).", null=True)),
                ('website_name', models.CharField(default='', help_text='Name of your website.', max_length=255)),
                ('app_offered_by_label', models.CharField(default='Offered by', help_text='Label for `Offered by` on the appointment page', max_length=255)),
                ('default_reschedule_limit', models.PositiveIntegerField(default=3, help_text='Default maximum number of times an appointment can be rescheduled across all services.')),
                ('allow_staff_change_on_reschedule', models.BooleanField(default=True, help_text='Allows clients to change the staff member when rescheduling an appointment.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_code', models.CharField(default=slots.models.generate_service_id, max_length=6, null=True)),
                ('name', models.CharField(max_length=100)),
                ('service_title', models.CharField(max_length=225, null=True)),
                ('description', ckeditor.fields.RichTextField(blank=True)),
                ('duration', models.DurationField(validators=[django.core.validators.MinValueValidator(datetime.timedelta(seconds=1))])),
                ('price', models.DecimalField(decimal_places=2, max_digits=8, validators=[django.core.validators.MinValueValidator(0)])),
                ('down_payment', models.DecimalField(decimal_places=2, default=0, max_digits=6, validators=[django.core.validators.MinValueValidator(0)])),
                ('image', models.ImageField(blank=True, null=True, upload_to='services/')),
                ('service_logo', models.ImageField(blank=True, null=True, upload_to='service_logo/')),
                ('currency', models.CharField(default='KES', max_length=3, validators=[django.core.validators.MaxLengthValidator(3), django.core.validators.MinLengthValidator(3)])),
                ('background_color', models.CharField(blank=True, default=slots.models.generate_rgb_color, max_length=50, null=True)),
                ('reschedule_limit', models.PositiveIntegerField(default=0, help_text='Maximum number of times an appointment can be rescheduled.')),
                ('allow_rescheduling', models.BooleanField(default=False, help_text='Indicates whether appointments for this service can be rescheduled.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='StaffMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('open_for_mboka', models.BooleanField(default=True)),
                ('joined_date_at', models.DateTimeField(auto_now_add=True)),
                ('staff_code', models.UUIDField(default=uuid.uuid4)),
                ('staff_role', models.CharField(choices=[('doctor', 'Doctor'), ('receptionist', 'Receptionist'), ('nurse', 'Nurse'), ('admin', 'Admin'), ('ICT', 'IT')], max_length=20)),
                ('is_clinic_owner', models.BooleanField(default=True)),
                ('slot_duration', models.PositiveIntegerField(blank=True, help_text='Minimum time for an appointment in minutes, recommended 30.', null=True)),
                ('lead_time', models.TimeField(blank=True, help_text='Time when the staff member starts working.', null=True)),
                ('finish_time', models.TimeField(blank=True, help_text='Time when the staff member stops working.', null=True)),
                ('appointment_buffer_time', models.FloatField(blank=True, help_text="Time between now and the first available slot for the current day (doesn't affect tomorrow). e.g: If you start working at 9:00 AM and the current time is 8:30 AM and you set it to 30 minutes, the first available slot will be at 9:00 AM. If you set the appointment buffer time to 60 minutes, the first available slot will be at 9:30 AM.", null=True)),
                ('work_on_saturday', models.BooleanField(default=False)),
                ('work_on_sunday', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('clinic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Dashboard.clinicreg')),
                ('services_offered', models.ManyToManyField(to='slots.service')),
                ('user', models.ForeignKey(limit_choices_to=models.Q(('registered', True), ('open_for_mboka', True), _connector='OR'), on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='related_user')),
            ],
            options={
                'unique_together': {('user', 'clinic', 'staff_role')},
            },
        ),
        migrations.CreateModel(
            name='RescheduleHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(help_text='The previous date of the appointment before it was rescheduled.')),
                ('start_time', models.TimeField(help_text='The previous start time of the appointment before it was rescheduled.')),
                ('end_time', models.TimeField(help_text='The previous end time of the appointment before it was rescheduled.')),
                ('reason_for_rescheduling', models.TextField(blank=True, help_text='Reason for the appointment reschedule.', null=True)),
                ('reschedule_status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed')], default='pending', help_text='Indicates the status of the reschedule action.', max_length=10)),
                ('id_request', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time the reschedule was recorded.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time the reschedule was confirmed.')),
                ('appointment_request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reschedule_histories', to='slots.appointmentrequest')),
                ('staff_member', models.ForeignKey(help_text='The previous staff member of the appointment before it was rescheduled.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='slots.staffmember')),
            ],
            options={
                'verbose_name': 'Reschedule History',
                'verbose_name_plural': 'Reschedule Histories',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PaymentInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('appointment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='slots.appointment')),
            ],
        ),
        migrations.CreateModel(
            name='PasswordResetToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('expires_at', models.DateTimeField()),
                ('status', models.CharField(choices=[('active', 'Active'), ('verified', 'Verified'), ('invalidated', 'Invalidated')], default='active', max_length=11)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='password_reset_tokens', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EmailVerificationCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=6)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DayOff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('staff_member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='slots.staffmember')),
            ],
        ),
        migrations.AddField(
            model_name='appointmentrequest',
            name='service',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='slots.service'),
        ),
        migrations.AddField(
            model_name='appointmentrequest',
            name='staff_member',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='slots.staffmember'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='appointment_request',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='slots.appointmentrequest'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='client',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='patients', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='WorkingHours',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.PositiveIntegerField(choices=[(0, 'Sunday'), (1, 'Monday'), (2, 'Tuesday'), (3, 'Wednesday'), (4, 'Thursday'), (5, 'Friday'), (6, 'Saturday')])),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('staff_member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='slots.staffmember')),
            ],
            options={
                'verbose_name': 'Working Hour',
                'verbose_name_plural': 'Working Hours',
                'unique_together': {('staff_member', 'day_of_week')},
            },
        ),
    ]
