# Generated by Django 4.2.23 on 2025-09-06 12:27

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields
import saas.utils


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(help_text='Unique identifier shown in the URL bar', unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date/time of creation (in ISO format)')),
                ('is_active', models.BooleanField(default=True)),
                ('full_name', models.CharField(blank=True, max_length=100, verbose_name='Profile name')),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(max_length=50)),
                ('street_address', models.CharField(max_length=150, verbose_name='Street address')),
                ('locality', models.CharField(max_length=50, verbose_name='City/Town')),
                ('region', models.CharField(max_length=50, verbose_name='State/Province/County')),
                ('postal_code', models.CharField(max_length=50, verbose_name='Zip/Postal code')),
                ('country', django_countries.fields.CountryField(max_length=2, verbose_name='Country')),
                ('is_bulk_buyer', models.BooleanField(default=False, help_text='Enable GroupBuy (<a href="https://www.djaodjin.com/docs/faq/#group-billing" target="_blank">what is it?</a>)')),
                ('is_provider', models.BooleanField(default=False, help_text='The profile can fulfill the provider side of a subscription.')),
                ('default_timezone', models.CharField(default='Africa/Nairobi', help_text='Timezone to use when reporting metrics', max_length=100)),
                ('picture', models.URLField(blank=True, help_text='URL location of the profile picture', max_length=2083, null=True, verbose_name='Profile picture')),
                ('billing_start', models.DateField(help_text='Date at which the next automatic charge will be generated (in ISO format)', null=True)),
                ('funds_balance', models.PositiveIntegerField(default=0, help_text='Funds escrowed in currency unit')),
                ('nb_renewal_attempts', models.PositiveIntegerField(default=0, help_text='Number of successive failed charges')),
                ('processor_card_key', models.SlugField(blank=True, max_length=255, null=True)),
                ('processor_deposit_key', models.SlugField(blank=True, help_text='Used to deposit funds to the organization bank account', max_length=255, null=True)),
                ('processor_priv_key', models.SlugField(blank=True, max_length=255, null=True)),
                ('processor_pub_key', models.SlugField(blank=True, max_length=255, null=True)),
                ('processor_refresh_token', models.SlugField(blank=True, max_length=255, null=True)),
                ('extra', models.TextField(blank=True, help_text='Extra meta data (can be stringify JSON)', null=True)),
                ('processor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processes', to=settings.SAAS_ORGANIZATION_MODEL)),
            ],
            options={
                'abstract': False,
                'swappable': 'SAAS_ORGANIZATION_MODEL',
            },
        ),
        migrations.CreateModel(
            name='Agreement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(help_text='Unique identifier shown in the URL bar', unique=True)),
                ('title', models.CharField(help_text='Short description of the agreement', max_length=150, unique=True)),
                ('updated_at', models.DateTimeField(auto_now_add=True, help_text='Date/time the agreement was last updated (in ISO format)')),
            ],
        ),
        migrations.CreateModel(
            name='Charge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('claim_code', models.SlugField(help_text='Unique code used to retrieve the invoice / charge', null=True)),
                ('created_at', models.DateTimeField(help_text='Date/time of creation (in ISO format)')),
                ('amount', models.PositiveIntegerField(default=0, help_text='Total amount in currency unit')),
                ('unit', models.CharField(default='usd', help_text='Three-letter ISO 4217 code for currency unit (ex: usd)', max_length=3)),
                ('description', models.TextField(help_text='Description for the charge as appears on billing statements', null=True)),
                ('last4', models.PositiveSmallIntegerField(help_text='Last 4 digits of the credit card used', null=True)),
                ('exp_date', models.DateField(help_text='Expiration date of the credit card used', null=True)),
                ('card_name', models.CharField(max_length=50, null=True)),
                ('processor_key', models.SlugField(help_text='Unique identifier returned by the payment processor', max_length=255, null=True, unique=True)),
                ('state', models.PositiveSmallIntegerField(choices=[(0, 'created'), (1, 'done'), (2, 'failed'), (3, 'disputed')], default=0, help_text='Current state (i.e. created, done, failed, disputed)')),
                ('extra', models.TextField(help_text='Extra meta data (can be stringify JSON)', null=True)),
                ('created_by', models.ForeignKey(db_column='user_id', null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('customer', models.ForeignKey(help_text='Organization charged', on_delete=django.db.models.deletion.PROTECT, to=settings.SAAS_ORGANIZATION_MODEL)),
                ('processor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='charges', to=settings.SAAS_ORGANIZATION_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Plan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(help_text='Unique identifier shown in the URL bar', unique=True)),
                ('title', models.CharField(help_text='Short description of the plan', max_length=50, null=True)),
                ('description', models.TextField(help_text='Long description of the plan')),
                ('is_active', models.BooleanField(default=False, help_text='True when a profile can subscribe to the plan')),
                ('is_not_priced', models.BooleanField(default=False, help_text='True if the plan has no pricing (i.e. contact us)')),
                ('is_personal', models.BooleanField(default=False, help_text='True when the plan is meant for personal profiles first and foremost')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date/time of creation (in ISO format)')),
                ('discontinued_at', models.DateTimeField(blank=True, help_text='Date/time the plan was discountinued (in ISO format)', null=True)),
                ('unit', models.CharField(default='usd', help_text='Three-letter ISO 4217 code for currency unit (ex: usd)', max_length=3)),
                ('skip_optin_on_grant', models.BooleanField(default=False, help_text='True requires a subscriber to accept the subscription when created by the provider')),
                ('optin_on_request', models.BooleanField(default=False, help_text='True requires a provider to accept the subscription when created by the subscriber')),
                ('setup_amount', models.PositiveIntegerField(default=0, help_text='One-time charge amount in currency unit')),
                ('period_amount', models.PositiveIntegerField(default=0, help_text='Recurring amount per period in currency unit')),
                ('period_type', models.PositiveSmallIntegerField(choices=[(1, 'HOURLY'), (2, 'DAILY'), (3, 'WEEKLY'), (4, 'MONTHLY'), (5, 'YEARLY')], default=5, help_text='Natural period length of a subscription to the plan (hourly, daily, weekly, monthly, yearly)')),
                ('period_length', models.PositiveSmallIntegerField(default=1, help_text='Number of periods for a subscription to the plan (defaults to 1)')),
                ('broker_fee_percent', models.PositiveIntegerField(default=0, help_text='Broker fee per transaction (in per 10000).')),
                ('unlock_event', models.CharField(blank=True, help_text='Payment required to access full service', max_length=128, null=True)),
                ('length', models.PositiveSmallIntegerField(blank=True, help_text='Number of natural periods before a subscription to the plan ends (default to 1)', null=True)),
                ('renewal_type', models.PositiveSmallIntegerField(choices=[(0, 'ONE-TIME'), (1, 'AUTO-RENEW'), (2, 'REPEAT')], default=1, help_text='What happens at the end of a subscription period (one-time, auto-renew, repeat)')),
                ('extra', models.TextField(help_text='Extra meta data (can be stringify JSON)', null=True)),
                ('next_plan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='saas.plan')),
                ('organization', models.ForeignKey(help_text='Profile the plan belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='plans', to=settings.SAAS_ORGANIZATION_MODEL)),
            ],
            options={
                'unique_together': {('slug', 'organization')},
            },
            bases=(saas.utils.SlugTitleMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('auto_renew', models.BooleanField(default=True, help_text='The subscription is set to auto-renew at the end of the period')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date/time of creation (in ISO format)')),
                ('ends_at', models.DateTimeField(help_text='Date/time when the subscription period currently ends (in ISO format)')),
                ('description', models.TextField(blank=True, help_text='Free-form text description for the subscription', null=True)),
                ('request_key', models.SlugField(blank=True, help_text='Unique key generated when a request is initiated', max_length=40, null=True)),
                ('grant_key', models.SlugField(blank=True, help_text='Unique key generated when a grant is initiated', max_length=40, null=True)),
                ('extra', models.TextField(help_text='Extra meta data (can be stringify JSON)', null=True)),
                ('organization', models.ForeignKey(help_text='Profile subscribed to the plan', on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to=settings.SAAS_ORGANIZATION_MODEL)),
                ('plan', models.ForeignKey(help_text='Plan the organization is subscribed to', on_delete=django.db.models.deletion.CASCADE, to='saas.plan')),
            ],
        ),
        migrations.CreateModel(
            name='UseCharge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(help_text='Unique identifier shown in the URL bar', unique=True)),
                ('title', models.CharField(help_text='Short description of the use charge', max_length=50, null=True)),
                ('description', models.TextField(help_text='Long description of the use charge')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date/time of creation (in ISO format)')),
                ('use_amount', models.PositiveIntegerField(default=0, help_text='Amount per unit defined by the provider of the use charge in plan currency unit (ex: $0.01/request)')),
                ('quota', models.PositiveIntegerField(default=0, help_text='Usage included in the plan (in units defined by the provider)')),
                ('maximum_limit', models.PositiveIntegerField(default=0, help_text='Maximum spend limit per period above which the subscriber is notified (in currency unit)', null=True)),
                ('extra', models.TextField(help_text='Extra meta data (can be stringify JSON)', null=True)),
                ('plan', models.ForeignKey(help_text='Plan the use chage is related to', on_delete=django.db.models.deletion.CASCADE, related_name='use_charges', to='saas.plan')),
            ],
            options={
                'unique_together': {('slug', 'plan')},
            },
            bases=(saas.utils.SlugTitleMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(help_text='Date/time of creation (in ISO format)')),
                ('orig_account', models.CharField(default='unknown', help_text='Source account from which funds are withdrawn', max_length=255)),
                ('orig_amount', models.PositiveIntegerField(default=0, help_text='Amount withdrawn from source in orig_unit')),
                ('orig_unit', models.CharField(default='usd', help_text='Three-letter ISO 4217 code for source currency unit (ex: usd)', max_length=3)),
                ('dest_account', models.CharField(default='unknown', help_text='Target account to which funds are deposited', max_length=255)),
                ('dest_amount', models.PositiveIntegerField(default=0, help_text='Amount deposited into target in dest_unit')),
                ('dest_unit', models.CharField(default='usd', help_text='Three-letter ISO 4217 code for target currency unit (ex: usd)', max_length=3)),
                ('descr', models.TextField(default='N/A', help_text='Free-form text description for the Transaction')),
                ('event_id', models.SlugField(help_text='Event at the origin of this transaction (ex. subscription, charge, etc.)', null=True)),
                ('dest_organization', models.ForeignKey(help_text='Billing profile to which funds are deposited', on_delete=django.db.models.deletion.PROTECT, related_name='incoming', to=settings.SAAS_ORGANIZATION_MODEL)),
                ('orig_organization', models.ForeignKey(help_text='Billing profile from which funds are withdrawn', on_delete=django.db.models.deletion.PROTECT, related_name='outgoing', to=settings.SAAS_ORGANIZATION_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SubscriptionUse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('expiring_quota', models.PositiveIntegerField(default=0, help_text='Number of use events that expire at the end of the current period')),
                ('rollover_quota', models.PositiveIntegerField(default=0, help_text='Number of use events that rollover to the next period')),
                ('used_quantity', models.PositiveIntegerField(default=0, help_text='Number of use events generated over the life of the subscription')),
                ('extra', models.TextField(help_text='Extra meta data (can be stringify JSON)', null=True)),
                ('subscription', models.ForeignKey(help_text='Subscription usage is added to', on_delete=django.db.models.deletion.CASCADE, related_name='uses', to='saas.subscription')),
                ('use', models.ForeignKey(help_text='UseCharge refered to', on_delete=django.db.models.deletion.CASCADE, to='saas.usecharge')),
            ],
        ),
        migrations.CreateModel(
            name='RoleDescription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date/time of creation (in ISO format)')),
                ('slug', models.SlugField(help_text='Unique identifier shown in the URL bar', unique=True)),
                ('title', models.CharField(help_text='Short description of the role. Grammatical rules to pluralize the title might be used in User Interfaces.', max_length=20)),
                ('skip_optin_on_grant', models.BooleanField(default=False, help_text='Automatically grants the role without requiring a user to accept it.')),
                ('implicit_create_on_none', models.BooleanField(default=False, help_text='Automatically adds the role when a user and profile share the same e-mail domain.')),
                ('otp_required', models.BooleanField(default=False, help_text='Requires users with the role to sign-in using an OTP code as a multi-factor authentication.')),
                ('extra', models.TextField(help_text='Extra meta data (can be stringify JSON)', null=True)),
                ('organization', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='role_descriptions', to=settings.SAAS_ORGANIZATION_MODEL)),
            ],
            options={
                'unique_together': {('slug', 'organization')},
            },
            bases=(saas.utils.SlugTitleMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Coupon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date/time of creation (in ISO format)')),
                ('code', models.SlugField(help_text='Unique identifier per provider, typically used in URLs')),
                ('description', models.TextField(blank=True, help_text='Free-form text description for the coupon', null=True)),
                ('discount_type', models.PositiveSmallIntegerField(choices=[(1, 'percentage'), (2, 'currency'), (3, 'period')], default=1)),
                ('discount_value', models.PositiveIntegerField(default=0, help_text='Amount of the discount')),
                ('ends_at', models.DateTimeField(blank=True, help_text='Date/time at which the coupon code expires (in ISO format)', null=True)),
                ('nb_attempts', models.IntegerField(blank=True, help_text='Number of times the coupon can be used', null=True)),
                ('extra', models.TextField(help_text='Extra meta data (can be stringify JSON)', null=True)),
                ('organization', models.ForeignKey(help_text='Coupon will only apply to purchased plans from this provider', on_delete=django.db.models.deletion.CASCADE, to=settings.SAAS_ORGANIZATION_MODEL)),
                ('plan', models.ForeignKey(blank=True, help_text='Coupon will only apply to this plan', null=True, on_delete=django.db.models.deletion.CASCADE, to='saas.plan')),
            ],
            options={
                'unique_together': {('organization', 'code')},
            },
        ),
        migrations.CreateModel(
            name='CartItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date/time of creation (in ISO format)')),
                ('recorded', models.BooleanField(default=False, help_text='Whever the item has been checked out or not')),
                ('quantity', models.PositiveIntegerField(default=0, help_text='Number of periods to be paid in advance')),
                ('option', models.PositiveIntegerField(default=0, help_text='Index in the list of discounts for advance payments')),
                ('full_name', models.CharField(blank=True, help_text='Full name of the person that will benefit from the subscription (GroupBuy)', max_length=150, verbose_name='Full name')),
                ('email', models.CharField(blank=True, help_text='e-mail of the person that will benefit from the subscription (GroupBuy)', max_length=255, null=True)),
                ('sync_on', models.CharField(blank=True, help_text='identifier of the person that will benefit from the subscription (GroupBuy)', max_length=255, null=True)),
                ('claim_code', models.SlugField(blank=True, help_text='Code used to assign the cart item to a user in group buy', null=True)),
                ('coupon', models.ForeignKey(blank=True, help_text='Coupon to apply to the order', null=True, on_delete=django.db.models.deletion.CASCADE, to='saas.coupon')),
                ('plan', models.ForeignKey(help_text='Item in the cart (if plan)', null=True, on_delete=django.db.models.deletion.CASCADE, to='saas.plan')),
                ('use', models.ForeignKey(help_text='Item added to the cart (if use charge)', null=True, on_delete=django.db.models.deletion.CASCADE, to='saas.usecharge')),
                ('user', models.ForeignKey(db_column='user_id', help_text='User who added the item to the cart (``None`` means the item could be claimed)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cart_items', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='BalanceLine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report', models.SlugField()),
                ('title', models.CharField(help_text='Title for the row', max_length=255)),
                ('selector', models.CharField(blank=True, help_text='Filter on transaction accounts', max_length=255)),
                ('is_positive', models.BooleanField(default=False)),
                ('rank', models.IntegerField(help_text='Absolute position of the row in the list of rows for the table')),
                ('moved', models.BooleanField(default=False)),
            ],
            options={
                'unique_together': {('report', 'rank', 'moved')},
            },
        ),
        migrations.CreateModel(
            name='AdvanceDiscount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('discount_type', models.PositiveSmallIntegerField(choices=[(1, 'Percentage'), (2, 'Currency'), (3, 'Period')], default=1)),
                ('discount_value', models.PositiveIntegerField(default=0, help_text='Amount of the discount')),
                ('length', models.PositiveSmallIntegerField(default=1, help_text='Contract length associated with the period (defaults to 1)')),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='advance_discounts', to='saas.plan')),
            ],
        ),
        migrations.AddField(
            model_name='organization',
            name='subscribes_to',
            field=models.ManyToManyField(related_name='subscribers', through='saas.Subscription', to='saas.plan'),
        ),
        migrations.CreateModel(
            name='Signature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_signed', models.DateTimeField(auto_now_add=True)),
                ('agreement', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='saas.agreement')),
                ('user', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='signatures', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('agreement', 'user')},
            },
        ),
        migrations.CreateModel(
            name='ChargeItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invoice_key', models.SlugField(blank=True, null=True)),
                ('sync_on', models.CharField(max_length=255, null=True)),
                ('charge', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='charge_items', to='saas.charge')),
                ('invoiced', models.ForeignKey(help_text='Transaction invoiced through this charge', on_delete=django.db.models.deletion.PROTECT, related_name='invoiced_item', to='saas.transaction')),
                ('invoiced_broker_fee', models.ForeignKey(help_text='Fee transaction to broker in order to process the transaction invoiced through this charge', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='invoiced_broker_fee_item', to='saas.transaction')),
                ('invoiced_distribute', models.ForeignKey(help_text='Transaction recording the distribution from processor to provider.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='invoiced_distribute', to='saas.transaction')),
                ('invoiced_processor_fee', models.ForeignKey(help_text='Fee transaction to processor in order to process the transaction invoiced through this charge', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='invoiced_processor_fee_item', to='saas.transaction')),
            ],
            options={
                'unique_together': {('charge', 'invoiced')},
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date/time of creation (in ISO format)')),
                ('request_key', models.SlugField(blank=True, help_text='Key to identify the request for the role', max_length=40, null=True)),
                ('grant_key', models.SlugField(blank=True, help_text='Key to identify the grant of the role', max_length=40, null=True)),
                ('extra', models.TextField(help_text='Extra meta data (can be stringify JSON)', null=True)),
                ('ends_at', models.DateTimeField(blank=True, help_text='Date/time when the role ends', null=True)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='role', to=settings.SAAS_ORGANIZATION_MODEL)),
                ('role_description', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='saas.roledescription')),
                ('user', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='role', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
                'swappable': 'SAAS_ROLE_MODEL',
                'unique_together': {('organization', 'user')},
            },
        ),
    ]
